name: URL Status Checker CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  IMAGE_NAME: url-status-checker
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  test:
    name: Run Tests and Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-flask
        
    - name: Run linting with flake8
      run: |
        cd app
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run unit tests
      run: |
        cd app
        python -m pytest test_app.py -v
      
    - name: Test Flask application starts
      run: |
        cd app
        timeout 30s python app.py &
        sleep 5
        curl -f http://localhost:5000/api/health || exit 1

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        file: ./app/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Verify pushed image
      run: |
        echo "Image successfully pushed to Docker Hub"
        echo "Tags: ${{ steps.meta.outputs.tags }}"

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: always()
    
    steps:
    - name: Notify via GitHub Actions
      run: |
        echo "CI/CD Pipeline completed!"
        echo "Test Status: ${{ needs.test.result }}"
        echo "Build Status: ${{ needs.build-and-push.result }}"
        echo "Workflow URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
    - name: Send workflow status to Slack (optional)
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}